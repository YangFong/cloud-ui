#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const shelljs = require('shelljs');
const node = require('enhanced-resolve/lib/node');
const { VueExtendTree } = require('vue-component-analyzer');

// webpack同步文件解析 https://blog.johnnyreilly.com/2016/12/webpack-syncing-enhanced-resolve.html
function makeSyncResolver(options) {
    return node.create.sync(options.resolve);
}
const resolveSync = makeSyncResolver({});

const vueExtendTree = new VueExtendTree();
vueExtendTree.resolve = (request, path) => resolveSync(path, request);

const include = /\.vue$|\.vue\/index\.js$/;
const root = process.argv[2];
let files = [];
files = files.concat(shelljs.ls('-RA', path.join(process.cwd(), root)).stdout.split('\n').filter((root) => include.test(root)).map((filePath) => path.join(process.cwd(), root, filePath)).filter((root) => fs.statSync(root).isFile()));

const count = 0;
// let count2 = 0;
files.forEach((file) => {
    vueExtendTree.loadJSFile(file).then((jsFile) => {
        if (!jsFile.content.includes('watch:'))
            return;
        const exportDefaultDeclaration = jsFile.babelResult.ast.program.body.find((node) => node.type === 'ExportDefaultDeclaration');
        if (!exportDefaultDeclaration)
            return console.info(file, 'No export default declaration');
        const objectExpression = exportDefaultDeclaration.declaration;
        // count2++;
        // console.info(count2, file);
        const watchProperty = objectExpression.properties.find((property) => property.key.name === 'watch');
        if (!watchProperty)
            return console.info(file, 'No watch property');
        const watchNames = watchProperty.value.properties.map((property) => property.key.name || property.key.value);

        const extendsProperty = objectExpression.properties.find((property) => property.key.name === 'extends');
        const mixinsProperty = objectExpression.properties.find((property) => property.key.name === 'mixins');
        if (!extendsProperty && !mixinsProperty)
            return;
        console.info(count, `${path.relative(root, file)}:---------------------
    extends: ${extendsProperty.value.name},---------------------
    mixins: ${mixinsProperty.value.elements.map((node) => node.name)},---------------------
    watch: ${watchNames},---------------------
`);
        // console.info(jsFile);
        // return vueExtendTree.findSuper(jsFile).then((supr) => {
        //     console.info(supr);
        // });
    }).catch((e) => {
        // console.info(file, '------ERROR------', e.message);
    });
});
