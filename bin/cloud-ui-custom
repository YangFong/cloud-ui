#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const program = require('commander');
const spawn = require('child_process').spawn;

program
    .option('-o, --output <output>', 'output path')
    .option('-f, --focus', 'focus build')
    .option('--css [css]', 'global css path')
    .option('-c, --config [config]', 'vusion config')
    .parse(process.argv);

const root = process.cwd();
let clodUI = path.resolve(root, './node_modules/cloud-ui.vusion');
if (!fs.existsSync(clodUI)) {
    clodUI = path.resolve(__dirname, '../');
}
const protoUI = path.resolve(root, './node_modules/proto-ui.vusion');
const clodUIVersion = require(path.join(clodUI, './package.json')).version;
const protoUIVersion = require(path.join(protoUI, './package.json')).version;
const version = `${clodUIVersion}-${protoUIVersion}`;
if (!program.output) {
    throw new Error('must have a output');
}
let isCached = false;
const cachePath = path.join(root, program.output, '.version');
if (fs.existsSync(cachePath)) {
    isCached = fs.readFileSync(cachePath).toString() === version;
}
if (program.focus || !isCached) {
    let globalCSSPath = '';
    if (program.css) {
        globalCSSPath = path.join(root, program.css);
    }
    const output = path.join(root, program.output);
    const entryPath = path.join(__dirname, '../src/index.js');
    const vusion = spawn('npx', `vusion-ui-build ${program.config || ''} -c ./vusion.ui.config.js -o ${output} --css ${globalCSSPath} -e ${entryPath}`.split(' ').filter((i) => i), {
        cwd: path.join(__dirname, '../'),
        stdio: 'inherit',
    });
    vusion.on('close', (code) => {
        if (code !== 0)
            console.log(`vusion process exited with code ${code}`);
        else {
            fs.writeFileSync(cachePath, version);
            console.log('done.');
        }
    });
} else if (isCached) {
    console.log('done.(from cache)');
}
